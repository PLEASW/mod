game.custom.bans || (game.custom.bans = bans), game.ships.forEach(a => a.custom.init = !1); const playerData = function () { echo("\nList of players and their data:"); for (let a of game.ships) echo(a.id + ": Player name: " + a.name + ", position:(" + Math.trunc(a.x) + ", " + Math.trunc(a.y) + "), shield:" + a.shield + ", crystals: " + a.crystals + ", ship code:" + a.type); 0 == game.ships.length && echo("No ships.") }, removeTimeout = function (a) { a.custom.timeout = !1, a.custom.init = !1, sendUI(a, { id: "timeout", visible: !1 }) }, locateShip = function (a, b) { let c = a.split(" "), d = +(c[0] || "NaN"); if (isNaN(d)) game.modding.terminal.error("Please specify a ship id to take action"); else { let a = game.findShip(d); if (!a) game.modding.terminal.error("Requested ship not found!"); else try { "function" == typeof b && b(a, d, c.slice(1).join(" ")) } catch (a) { game.modding.terminal.error("string" == typeof a ? a : "An error occured while taking action with the requested ship!") } } }, identifierString = function (a) { return a.name + " (ID " + a.id + ")" }, addCommand = function (a, b) { game.modding.commands[a] = function (a) { let c = a.replace(/^\s+/, "").replace(/\s+/, " ").split(" "), d = b(c.slice(1).join(" ")); null != d && echo(d) } }, addShipInteractionCommand = function (a, b) { addCommand(a, function (a) { let c; return locateShip(a, function (a, d, e) { let f = b(a, d, e); null != f && (c = identifierString(a) + " " + f) }), c }) }, kickShip = function (a, b, c) { b && (game.custom.bans.push(a.name), game.custom.bans = [...new Set(game.custom.bans)]); let d = b ? "banned" : "kicked"; return a.gameover({ [`You've been ${d} by the map host`]: " ", Reason: c || "No reason has been provided" }), "was " + d }; addShipInteractionCommand("timeout", function (a, b, c) { if (a.custom.timeout) return clearTimeout(a.custom.timeoutID), removeTimeout(a), `was removed from timeout`; let d = +c, e = Number.isNaN(d) || 0 >= d; a.custom.timeout = !0, a.set({ x: 980, y: -980, type: 102, vx: 0, vy: 0, crystals: 0, shield: 100, collider: !0 }); for (let d = 0; d < ids.length; d++)sendUI(a, { id: ids[d], visible: !1 }); return sendUI(a, { id: "timeout", position: [25, 85, 50, 25], visible: !0, components: [{ type: "text", position: [0, 0, 100, 20], value: "You are in timeout!", color: "#ffbbbb" }] }), sendUI(a, { id: "Options", visible: !1 }), sendUI(a, { id: "Restore", visible: !1 }), sendUI(a, { id: "Stats", visible: !1 }), e || (a.custom.timeoutID = setTimeout(removeTimeout, 1e3 * d, a)), `was timed out ${e ? "permanently" : "for " + d + " second(s)"}` }), addShipInteractionCommand("weapons", function (a) { return a.custom.weapons = !a.custom.weapons, `was ${a.custom.weapons ? "allowed" : "denied"} to use secondaries!` }), addShipInteractionCommand("admin", function (a) { let b = a.custom.authorize = !a.custom.authorize; return sendUI(a, { id: "Admin ship", position: [27, 0, 10, 4], clickable: b, visible: b, shortcut: "M", components: [{ type: "box", position: [0, 0, 200, 100], fill: "rgba(68, 85, 102, 0)", stroke: "#cde", width: 5 }, { type: "text", position: [0, 30, 100, 60], value: "Admin ship [M]", color: "#cde" }] }), sendUI(a, { id: "gamer", position: [18, 0, 10, 4], clickable: b, visible: b, shortcut: "K", components: [{ type: "box", position: [0, 0, 200, 100], fill: "rgba(68, 85, 102, 0)", stroke: "#cde", width: 5 }, { type: "text", position: [0, 30, 100, 60], value: "TELEPORT", color: "#cde" }] }), sendUI(a, { id: "rotate", position: [18, 0, 10, 4], clickable: b, visible: b, shortcut: "L", components: [{ type: "box", position: [0, 0, 200, 100], fill: "rgba(68, 85, 102, 0)", stroke: "#cde", width: 5 }, { type: "text", position: [0, 30, 100, 60], value: "Rotate", color: "#cde" }] }), !a.custom.authorize && 790 < a.type && a.set({ type: 101, crystals: 20, collider: !0 }), `was ${a.custom.authorize ? "granted" : "removed from"} admin permissions!` }), addShipInteractionCommand("mute", function (a) { let b = game.options.vocabulary.concat({ key: "C" }); for (let c = 0; c < b.length; c++)sendUI(a, { id: "mute1" + c, clickable: !0, shortcut: b[c].key, position: [0, 0, 0, 0] }); return "was muted" }), addShipInteractionCommand("crash", function (a) { let b = a.custom.crash = !a.custom.crash; return a.set({ vx: 0, vy: 0, idle: b }), sendUI(a, { id: "yeet", position: [0, 0, 500, 500], clickable: b, visible: b, components: [{ type: "box", position: [-50, -50, 100, 100], fill: "rgba(3, 247, 255, 100)", stroke: "#cde", width: 5 }, { type: "text", position: [0, 60, 10, 10], value: "Stop being an ass", color: "#cde" }] }), sendUI(a, { id: "click", position: [0, 0, 500, 500], clickable: b, visible: b, components: [{ type: "box", position: [-50, -50, 100, 100], fill: "rgba(3, 247, 255, 0)", stroke: "#cde", width: 5 }, { type: "text", position: [0, 60, 10, 10], value: "Stop being an ass", color: "#cde" }] }), b ? sendUI(a, { id: "Options", clickable: !b }) : a.custom.init = !1, sendUI(a, { id: "Restore", visible: !b }), `was ${b ? "yeeted" : "forgiven"}` }), addShipInteractionCommand("kick", function (a, b, c) { return kickShip(a, !1, c) }), addShipInteractionCommand("ban", function (a, b, c) { return kickShip(a, !0, c) }), addCommand("banlist", function () { echo("List of currently banned names (type `unban <index1> <index2> ...` to unban): "), game.custom.bans.forEach((a, b) => echo(b + 1 + ": " + a)), 0 == game.custom.bans.length && echo("No bans.") }), addCommand("unban", function (a) { a.split(" ").forEach(a => { let b = game.custom.bans[--a]; null != b && (game.custom.bans[a] = null, echo(`Removed the ban for '${b}'`)) }), game.custom.bans = game.custom.bans.filter(a => null != a) }), addCommand("announce", function (a) { return sendUI(game, { id: "id", position: [25, 75, 50, 25], visible: !0, components: [{ type: "text", position: [0, 0, 100, 20], value: a, color: "#ffbbbb" }] }), setTimeout(function () { sendUI(game, { id: "id", visible: !1 }) }, 12500), "Announced the message to everyone" }), addCommand("playerlist", playerData), addCommand("count", function () { echo("List of entities and their numbers :"), echo("Asteroids: " + game.asteroids.length), echo("Players: " + game.ships.length), echo("Aliens: " + game.aliens.length) }), addCommand("clearmap", function () { return game.setCustomMap(""), "Game map has been cleared" }), addCommand("restoremap", function () { return game.setCustomMap(map), "Game map has been restored" }), addCommand("entityclear", function () { for (let a of game.aliens) a.set({ kill: !0 }); for (let a of game.asteroids) a.set({ kill: !0 }); return "Entities have been cleared!" }), addCommand("playerclear", function () { for (let a of game.ships) a.set({ kill: !0 }); return "Players have been cleared!" }); function shipCargo(a) { return 20 * Math.trunc(a / 100) ** 2 } const sendUI = function (a, b) { null != a && "function" == typeof a.setUIComponent && (b.visible || null == b.visible ? a.setUIComponent(b) : a.setUIComponent({ id: b.id, position: [0, 0, 0, 0], visible: !1 })) }; function initialize(a) { a.custom.options = !0, a.custom.init = !0; const b = `Options[${optionshortcut}]`; sendUI(a, { id: "Options", position: [73.4, 0, 6.6, 4], clickable: !0, visible: !0, shortcut: optionshortcut, components: [{ type: "box", position: [0, 0, 100, 100], fill: "rgba(68, 85, 102, 0)", stroke: buttonColor, width: 5 }, { type: "text", position: Center(7 * b.length, 100), value: b, color: buttonColor }] }); const c = `Restore[${restoreshortcut}]`; sendUI(a, { id: "Restore", position: [66.3, 0, 7.2, 4], clickable: !0, visible: !0, shortcut: restoreshortcut, components: [{ type: "box", position: [0, 0, 100, 100], fill: "rgba(68, 85, 102, 0)", stroke: buttonColor, width: 5 }, { type: "text", position: Center(7 * c.length, 100), value: c, color: buttonColor }] }), welcomeText(a) } this.tick = function (a) { if (0 == a.step % 15) { for (let b of a.ships) b.custom.weapons || b.emptyWeapons(); if (0 == a.step % 30) { for (let b of a.ships) { !b.custom.spectator && 1 > Math.abs(b.vx) && 1 > Math.abs(b.vy) && b.set({ collider: !0 }); const c = shipCargo(b.type); old_gem_pickup && b.crystals === c && b.set({ crystals: c - 1 }), -1 != a.custom.bans.indexOf(b.name) && (b.gameover({ "You have been banned from the game!": " " }), b.set({ kill: !0 })), b.custom.init || initialize(b), 0 == a.step % 1800 && 1 < a.ships.length && !0 == autolist && playerData() } if (a.aliens.length < max_aliens && !0 === alien_portal && a.addAlien(alien_array[Math.trunc(Math.random() * alien_array.length)]), !1 === alien_portal) for (let b of a.aliens) b.set({ kill: !0 }) } } }; const welcomeText = function (a, b) { clearTimeout(a.custom.welcomeTextID), sendUI(a, { id: "welcome", visible: !0, position: [35, 85, 30, 10], components: [{ type: "text", position: [0, 0, 100, 100], value: b || "Duel and chill, no toxic behaviours please.", color: "#cde" }] }), b && (a.custom.welcomeTextID = setTimeout(welcomeText, 2e3, a)) }, boxes = { Spawn: [0, 0], "AOW Pattern": [-855, -835], "Nexus Pattern": [-525, -855], "Light Pattern ": [-195, -855], "Zebra Pattern": [195, -855], Rumble: [-845, 845], Plinko: [-515, 855], Standoff: [-195, 845], Waffle: [195, 845], "Open Arena": [515, 845], Maze: [515, -845], "Empty Circle": [845, 845], "Empty box": [845, -845] }; function Center(a, b) { return [50 - a / 2, 50 - b / 2, a, b] } const ids = ["Next ship", "Previous ship", "Others", "Spectate", "Reset", "Stats", "Warp"], UIevents = { switch: function (a, b) { const c = globalShips[globalShips.indexOf(b.type) + a] || globalShips[0]; b.set({ type: c, shield: 999, crystals: shipCargo(c), stats: 700 <= c ? 0 : 88888888 }), b.custom.spectator = !1 }, next: function (a) { return a.type === globalShips[globalShips.length - 1] ? a.set({ type: globalShips[0], crystals: 20, stats: 88888888 }) : void this.switch(1, a) }, previous: function (a) { return a.type === globalShips[0] ? a.set({ type: globalShips[globalShips.length - 1], shield: 999, crystals: 980 }) : void this.switch(-1, a) }, spectate: function (a) { a.custom.spectator = !0, a.set({ crystals: 0, collider: !1, type: 102 === a.type && 103 || 102 }) }, reset: function (a) { 101 !== a.type && a.set({ type: 101, crystals: 20, stats: 11111111, shield: 100 }), a.custom.spectator = !1 }, others: function (a) { const b = otherShips[otherShips.indexOf(a.type) + 1] || otherShips[0]; a.set({ type: b, shield: 999, crystals: shipCargo(b), stats: 700 <= b ? 0 : 88888888 }), a.custom.spectator = !1 }, restore: function (a) { a.set({ shield: 999, crystals: shipCargo(a.type) }) }, stats: function (a) { 7 > Math.trunc(a.type / 100) && a.set({ stats: 999999999 * !a.stats }) }, admin: function (a) { if (!0 === a.custom.authorize) { const b = adminShipsCodes[adminShipsCodes.indexOf(a.type) + 1] || adminShipsCodes[0]; a.set({ type: b, crystals: 20, generator: 1e4, collider: !0 }) } }, yeet: function (a) { !0 === a.custom.authorize && a.set({ type: 101, crystals: 0, vx: 0, vy: 0, x: 985, y: -985 }) }, gamer: function (a) { !0 === a.custom.authorize && a.set({ x: 10 * Math.cos(a.r) + a.x, y: 10 * Math.sin(a.r) + a.y, z: 15 }) }, rotate: function (a) { if (!0 === a.custom.authorize) for (let a of game.ships) a.name == aimbotname && a.set({ x: 20 * Math.cos(game.ships[aimbotplayer].r) + game.ships[aimbotplayer].x, y: 20 * Math.sin(game.ships[aimbotplayer].r) + game.ships[aimbotplayer].y }) }, empty: function (a) { a.emptyWeapons() }, warp: function (a) { if (1 >= game.ships.length) return; a.set({ crystals: 0, collider: !1, type: 102 }), a.custom.spectator = !0; let b, c = a.custom.index || 0; do b = game.ships[++c] || game.ships[c = 0]; while (b == a); a.set({ x: b.x, y: b.y }), a.custom.index = c }, options: function (a) { if (a.custom.options) { let b = 2, c = 1; ids.forEach(d => { 0 == b % 5 && (b = 0, c++), sendUI(a, { id: d, position: [25 + 11 * b, 11 + 11 * c, 10, 10], visible: !0, clickable: !0, components: [{ type: "box", position: [0, 0, 100, 100], fill: "rgba(0, 0, 0, 0.5)", stroke: buttonColor, width: 5 }, { type: "text", position: Center(7 * d.length, 100), value: d, color: buttonColor }] }), b++ }), b -= 2, Object.keys(boxes).forEach(d => { 0 == b % 5 && (b = 0, c++), sendUI(a, { id: d, position: [25 + 11 * b, 24 + 11 * c, 10, 10], visible: !0, clickable: !0, components: [{ type: "box", position: [0, 0, 100, 100], fill: "rgba(0, 0, 0, 0.5)", stroke: buttonColor, width: 5 }, { type: "text", position: Center(7 * d.length, 100), value: d, color: buttonColor }] }), b++ }), sendUI(a, { id: "board", position: Center(60, 60), visible: !0, components: [{ type: "box", position: [0, 0, 100, 40], fill: `hsla(192, 100%, 50%, 0.5)` }, { type: "box", position: [0, 40, 100, 60], fill: `hsla(0, 100%, 50%, 0.5)` }, { type: "text", position: [0, 0, 40, 20], value: "Ships", color: buttonColor }, { type: "text", position: [0, 40, 40, 20], value: "Maps", color: buttonColor }, { type: "box", position: [0, 0, 100, 100], stroke: buttonColor, width: 5 }, { type: "box", position: [0, 39.5, 100, 1], fill: "rgba(255, 255, 255, 0.2)", width: 5 }] }) } else[...ids, ...Object.keys(boxes), "board"].forEach(b => sendUI(a, { id: b, visible: !1 })); a.custom.options = !a.custom.options } }; this.event = function (a, b) { const { ship: c, id: d } = a; switch (d) { case "Spectate": UIevents.spectate(c); break; case "Stats": UIevents.stats(c); break; case "Options": UIevents.options(c); break; case "Reset": UIevents.reset(c); break; case "Warp": UIevents.warp(c); break; default: for (let a in boxes) { const [b, e] = boxes[a]; if (d === a) return c.set({ x: b, y: e }) } }if (!c.custom.lastClickedStep || b.step - c.custom.lastClickedStep > buttonDelay ? (c.custom.lastClickedStep = b.step, "Next ship" === d ? UIevents.next(c) : "Previous ship" === d ? UIevents.previous(c) : "Others" === d ? UIevents.others(c) : "Restore" === d ? UIevents.restore(c) : "yeet" === d ? UIevents.yeet(c) : "gamer" === d ? UIevents.gamer(c) : "rotate" === d ? UIevents.rotate(c) : "empty" === d ? UIevents.empty(c) : "Admin ship" === d ? UIevents.admin(c) : void 0) : ["Spectate", "Stats", "Options", "Reset", "Warp"].includes(d) || welcomeText(c, "Too fast, hold up for a bit"), null != c && !c.custom.crashed && !c.custom.timeout) switch (a.name) { case "ship_spawned": const [b, d] = [c.custom.last_x ?? 0, c.custom.last_y ?? 0]; c.set({ x: b, y: d, invulnerable: 300, crystals: shipCargo(c.type) }); break; case "ship_destroyed": Object.assign(c.custom, { last_x: c.x, last_y: c.y }); } };